import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, Input, OnChanges, Renderer2, ViewChild } from '@angular/core';
import QRCode from 'qrcode';
import { NgxQrcodeElementTypes } from './qrcode.types';
import { DEFAULT_VALUES } from './qrcode.constants';
let QrcodeComponent = class QrcodeComponent {
    constructor(renderer) {
        this.renderer = renderer;
        this.elementType = DEFAULT_VALUES.elementType;
        this.cssClass = DEFAULT_VALUES.cssClass;
        this.value = DEFAULT_VALUES.value;
        this.version = DEFAULT_VALUES.version;
        this.errorCorrectionLevel = DEFAULT_VALUES.errorCorrectionLevel;
        this.margin = DEFAULT_VALUES.margin;
        this.scale = DEFAULT_VALUES.scale;
        this.width = DEFAULT_VALUES.width;
        this.colorDark = DEFAULT_VALUES.colorDark;
        this.colorLight = DEFAULT_VALUES.colorLight;
    }
    ngOnChanges() {
        this.createQRCode();
    }
    createQRCode() {
        if (!this.value) {
            return;
        }
        let element;
        switch (this.elementType) {
            case NgxQrcodeElementTypes.CANVAS:
                element = this.renderer.createElement('canvas');
                this.toCanvas(element).then(() => {
                    this.renderElement(element);
                }).catch(e => {
                    this.removeElementChildren();
                    console.error(e);
                });
                break;
            default:
                element = this.renderer.createElement('img');
                this.toDataURL().then((src) => {
                    element.setAttribute('src', src);
                    if (this.alt) {
                        element.setAttribute('alt', this.alt);
                    }
                    this.renderElement(element);
                }).catch(e => {
                    this.removeElementChildren();
                    console.error(e);
                });
        }
    }
    toDataURL() {
        return QRCode.toDataURL(this.value, {
            version: this.version,
            errorCorrectionLevel: this.errorCorrectionLevel,
            margin: this.margin,
            scale: this.scale,
            width: this.width,
            color: {
                dark: this.colorDark,
                light: this.colorLight
            }
        });
    }
    toCanvas(canvas) {
        return QRCode.toCanvas(canvas, this.value, {
            version: this.version,
            errorCorrectionLevel: this.errorCorrectionLevel,
            margin: this.margin,
            scale: this.scale,
            width: this.width,
            color: {
                dark: this.colorDark,
                light: this.colorLight
            }
        });
    }
    renderElement(element) {
        this.removeElementChildren();
        this.renderer.appendChild(this.qrcElement.nativeElement, element);
    }
    removeElementChildren() {
        for (const node of this.qrcElement.nativeElement.childNodes) {
            this.renderer.removeChild(this.qrcElement.nativeElement, node);
        }
    }
};
QrcodeComponent.ctorParameters = () => [
    { type: Renderer2 }
];
__decorate([
    Input()
], QrcodeComponent.prototype, "elementType", void 0);
__decorate([
    Input()
], QrcodeComponent.prototype, "cssClass", void 0);
__decorate([
    Input()
], QrcodeComponent.prototype, "alt", void 0);
__decorate([
    Input()
], QrcodeComponent.prototype, "value", void 0);
__decorate([
    Input()
], QrcodeComponent.prototype, "version", void 0);
__decorate([
    Input()
], QrcodeComponent.prototype, "errorCorrectionLevel", void 0);
__decorate([
    Input()
], QrcodeComponent.prototype, "margin", void 0);
__decorate([
    Input()
], QrcodeComponent.prototype, "scale", void 0);
__decorate([
    Input()
], QrcodeComponent.prototype, "width", void 0);
__decorate([
    Input()
], QrcodeComponent.prototype, "colorDark", void 0);
__decorate([
    Input()
], QrcodeComponent.prototype, "colorLight", void 0);
__decorate([
    ViewChild('qrcElement')
], QrcodeComponent.prototype, "qrcElement", void 0);
QrcodeComponent = __decorate([
    Component({
        selector: 'ngx-qrcode',
        template: `<div #qrcElement [class]="cssClass"></div>`,
        changeDetection: ChangeDetectionStrategy.OnPush
    })
], QrcodeComponent);
export { QrcodeComponent };
//# sourceMappingURL=data:application/json;base64,